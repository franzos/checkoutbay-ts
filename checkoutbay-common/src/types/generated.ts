/* eslint-disable */
/**
 * This file was automatically generated by typeshare from Rust.
 * Do not edit this file manually.
 * 
 * To regenerate, run: pnpm generate-types
 */

import { Currency } from '@gofranz/common';

/*
 Generated by typeshare 1.13.3
*/

export interface InlineAddress {
	recipient_name?: string;
	street: string;
	street2?: string;
	city: string;
	state: string;
	country: string;
	zip: string;
	phone?: string;
	vat_number?: string;
	company_name?: string;
}

export enum AddressType {
	Shop = "shop",
	Customer = "customer",
}

export interface NewAddress {
	recipient_name?: string;
	street: string;
	street2?: string;
	city: string;
	state: string;
	country: string;
	zip: string;
	phone?: string;
	vat_number?: string;
	company_name?: string;
	is_default: boolean;
	kind: AddressType;
	shop_id?: string;
	user_id?: string;
}

export interface NewOrderSubmissionItem {
	product_id: string;
	quantity: number;
}

export enum WeightUnit {
	Grams = "grams",
	Kilograms = "kilograms",
	Pounds = "pounds",
	Ounces = "ounces",
}

export enum DimensionUnit {
	Millimeters = "millimeters",
	Centimeters = "centimeters",
	Meters = "meters",
	Inches = "inches",
	Feet = "feet",
}

export interface PhysicalProperties {
	width?: number;
	height?: number;
	length?: number;
	weight?: number;
	weight_unit: WeightUnit;
	dimension_unit: DimensionUnit;
}

export interface NewProduct {
	title: string;
	cover_url?: string;
	slug: string;
	description: string;
	sku?: string;
	price: number;
	data?: string;
	data_public?: string;
	physical_properties?: PhysicalProperties;
	allow_negative_stock: boolean;
	is_live: boolean;
	requires_shipping: boolean;
	categories: string[];
	tags: string[];
	shop_id: string;
}

export interface NewPublicUserOrderFields {
	customer_user_email: string;
	shipping_address: InlineAddress;
	billing_address: InlineAddress;
}

export interface NewRegisteredUserOrderFields {
	customer_user_id: string;
	shipping_address_id: string;
	billing_address_id: string;
}

export enum StockMovementReason {
	Purchase = "purchase",
	Sale = "sale",
	Return = "return",
	Damage = "damage",
	Adjustment = "adjustment",
	Transfer = "transfer",
}

export interface NewStockMovement {
	quantity: number;
	product_id: string;
	warehouse_id: string;
	reference?: string;
	reason: StockMovementReason;
	shop_id: string;
}

export interface NewWarehouse {
	title: string;
	code?: string;
	address_id: string;
	is_active: boolean;
	shop_id: string;
}

export enum OrderStatus {
	Draft = "draft",
	New = "new",
	Paid = "paid",
	Processing = "processing",
	OnHold = "on_hold",
	Shipped = "shipped",
	Delivered = "delivered",
	Cancelled = "cancelled",
	Refunded = "refunded",
	Failed = "failed",
}

export enum OrderSource {
	PublicUser = "public_user",
	RegisteredUser = "registered_user",
}

export interface Order {
	id: string;
	customer_user_id?: string;
	customer_user_email?: string;
	shop_id: string;
	warehouse_id: string;
	shipping_address: InlineAddress;
	shipping_address_id?: string;
	billing_address: InlineAddress;
	billing_address_id?: string;
	currency: Currency;
	status: OrderStatus;
	shipping_method: string;
	shipping_total: number;
	subtotal_before_discount: number;
	discount_total: number;
	subtotal: number;
	tax_total: number;
	total: number;
	notes?: string;
	source: OrderSource;
	created_at: string;
	updated_at: string;
}

export interface OrderItem {
	id: string;
	order_id: string;
	product_id: string;
	sku?: string;
	quantity: number;
	unit_price: number;
	unit_tax: number;
	unit_discount: number;
	subtotal_before_discount: number;
	discount_total: number;
	subtotal: number;
	tax_total: number;
	total: number;
	created_at: string;
}

export enum PaymentStatus {
	Pending = "pending",
	Authorized = "authorized",
	Captured = "captured",
	Failed = "failed",
	Refunded = "refunded",
}

export interface OrderPayment {
	id: string;
	order_id: string;
	payment_gateway_id: string;
	amount: number;
	currency: Currency;
	status: PaymentStatus;
	transaction_id: string;
	data?: string;
	error_message?: string;
	created_at: string;
	updated_at: string;
}

export interface OrderTotal {
	shipping_total: number;
	subtotal_before_discount: number;
	discount_total: number;
	subtotal: number;
	tax_total: number;
	total: number;
}

export type OrderRecord = 
	| { type: "PublicUser", content: ProcessedPublicUserOrder }
	| { type: "RegisteredUser", content: ProcessedRegisteredUserOrder };

export interface OrdersResponse {
	data: OrderRecord[];
	total: number;
}

export interface ProcessedOrderItem {
	order_id: string;
	product_id: string;
	sku?: string;
	quantity: number;
	unit_price: number;
	unit_tax: number;
	unit_discount: number;
	subtotal_before_discount: number;
	discount_total: number;
	subtotal: number;
	tax_total: number;
	total: number;
}

export interface ProcessedOrderBase {
	id: string;
	shop_id: string;
	warehouse_id: string;
	currency: Currency;
	status: OrderStatus;
	shipping_method: string;
	notes?: string;
	items: ProcessedOrderItem[];
}

export interface Product {
	id: string;
	title: string;
	cover_url?: string;
	slug: string;
	description: string;
	sku?: string;
	price: number;
	data?: string;
	data_public?: string;
	physical_properties?: PhysicalProperties;
	allow_negative_stock: boolean;
	is_live: boolean;
	requires_shipping: boolean;
	categories: string[];
	tags: string[];
	shop_id: string;
	created_at: string;
	updated_at: string;
}

export interface PublicFile {
	id: string;
	filename: string;
	product_id: string;
}

export interface PublicStock {
	warehouse_id: string;
	product_id: string;
	stock_level: number;
}

export interface PublicWarehouse {
	id: string;
	title: string;
	zip: string;
	state: string;
	country: string;
}

export interface RegisteredUserOrderFields {
	customer_user_id: string;
	shipping_address_id: string;
	shipping_address: InlineAddress;
	billing_address_id: string;
	billing_address: InlineAddress;
}

export interface Shop {
	id: string;
	name: string;
	default_currency: Currency;
	created_at: string;
	updated_at: string;
}

export enum ShopRole {
	Owner = "owner",
	Member = "member",
}

export interface ShopUser {
	id: string;
	shop_id: string;
	user_id: string;
	role: ShopRole;
	created_at: string;
	updated_at: string;
}

export interface StockMovement {
	id: string;
	quantity: number;
	product_id: string;
	warehouse_id: string;
	reference?: string;
	reason: StockMovementReason;
	shop_id: string;
	created_at: string;
}

export interface Warehouse {
	id: string;
	title: string;
	code?: string;
	address_id: string;
	is_active: boolean;
	shop_id: string;
	created_at: string;
	updated_at: string;
}

export enum PaymentGatewayProvider {
	STRIPE = "stripe",
}

export enum ShippingRateCalculationMethod {
	ByUnit = "by_unit",
	ByKilo = "by_kilo",
	ByOrder = "by_order",
}

export enum ShippingSpeed {
	Standard = "standard",
	Express = "express",
}


// Type aliases for ProcessedOrder types (generated manually due to generic constraints)
export interface ProcessedPublicUserOrder {
    id: string;
    shop_id: string;
    warehouse_id: string;
    currency: Currency;
    status: OrderStatus;
    shipping_method: string;
    notes?: string;
    items: ProcessedOrderItem[];
    customer_user_email: string;
    shipping_address: InlineAddress;
    billing_address: InlineAddress;
    shipping_total: number;
    subtotal_before_discount: number;
    discount_total: number;
    subtotal: number;
    tax_total: number;
    total: number;
}

export interface ProcessedRegisteredUserOrder {
    id: string;
    shop_id: string;
    warehouse_id: string;
    currency: Currency;
    status: OrderStatus;
    shipping_method: string;
    notes?: string;
    items: ProcessedOrderItem[];
    customer_user_id: string;
    shipping_address_id: string;
    shipping_address: InlineAddress;
    billing_address_id: string;
    billing_address: InlineAddress;
    shipping_total: number;
    subtotal_before_discount: number;
    discount_total: number;
    subtotal: number;
    tax_total: number;
    total: number;
}

