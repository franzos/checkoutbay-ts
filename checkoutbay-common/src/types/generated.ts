/* eslint-disable */
/**
 * This file was automatically generated by typeshare from Rust.
 * Do not edit this file manually.
 * 
 * To regenerate, run: pnpm generate-types
 */

import { Currency } from '@gofranz/common';
import { Decimal } from 'decimal.js';

/*
 Generated by typeshare 1.13.3
*/

export type BankAccountDetails = 
	| { region: "UK", details: UKBankDetails }
	| { region: "US", details: USBankDetails }
	| { region: "EU", details: EUBankDetails }
	| { region: "AUSTRALIA", details: AustraliaBankDetails }
	| { region: "CANADA", details: CanadaBankDetails }
	| { region: "INDIA", details: IndiaBankDetails };

export enum TransferScope {
	DOMESTIC = "DOMESTIC",
	SEPA = "SEPA",
	INTERNATIONAL = "INTERNATIONAL",
	SWIFT = "SWIFT",
	CORRESPONDENT = "CORRESPONDENT",
}

export interface TransferType {
	scope: TransferScope;
	required_fields: string[];
	display_name: string;
	instructions: string;
}

export interface BankAccount {
	id: string;
	account_name: string;
	currency: Currency;
	details: BankAccountDetails;
	supported_transfer_types: TransferType[];
	special_instructions?: string;
}

export type BankAccountList = BankAccount[];

export interface ShippingRate {
	id: string;
	countries: string[];
	amount: Decimal | number;
	free_above_value?: Decimal | number;
}

export type ShippingRates = ShippingRate[];

export enum AddressType {
	Shop = "shop",
	Customer = "customer",
}

export interface Address {
	id: string;
	recipient_name?: string;
	street: string;
	street2?: string;
	city: string;
	state: string;
	country: string;
	zip: string;
	phone?: string;
	vat_number?: string;
	company_name?: string;
	is_default: boolean;
	kind: AddressType;
	shop_id?: string;
	user_id?: string;
	created_at: string;
	updated_at: string;
}

export interface AddressesResponse {
	data: Address[];
	total: number;
}

export interface AustraliaBankDetails {
	bank_name: string;
	bsb_number: string;
	account_number: string;
	account_holder_name: string;
	swift_code?: string;
}

export interface CanadaBankDetails {
	bank_name: string;
	institution_number: string;
	transit_number: string;
	account_number: string;
	account_holder_name: string;
	swift_code?: string;
}

export interface CorrespondentBankDetails {
	bank_name: string;
	swift_code: string;
	bank_address: string;
	additional_info?: string;
}

export enum DiscountType {
	VolumeDiscount = "volume_discount",
	TemporaryDiscount = "temporary_discount",
	OrderMinimumSpend = "order_minimum_spend",
	VoucherCode = "voucher_code",
}

export enum DiscountValueType {
	FixedAmount = "fixed_amount",
	Percentage = "percentage",
}

export type DiscountConfig = 
	| { type: "VolumeDiscount", content: {
	tiers: VolumeTier[];
}}
	| { type: "TemporaryDiscount", content: {
	metadata?: string;
}}
	| { type: "OrderMinimumSpend", content: {
	metadata?: string;
}}
	| { type: "VoucherCode", content: {
	code: string;
	usage_limit?: number;
	auto_generated: boolean;
	campaign_id?: string;
	metadata?: string;
}};

export interface Discount {
	id: string;
	shop_id: string;
	title: string;
	description?: string;
	discount_type: DiscountType;
	value: Decimal | number;
	value_type: DiscountValueType;
	minimum_spend_amount?: Decimal | number;
	config?: DiscountConfig;
	start_date: string;
	end_date: string;
	is_active?: boolean;
	created_at: string;
	updated_at: string;
}

export interface DiscountApplication {
	id: string;
	discount_id: string;
	order_id: string;
	voucher_code?: string;
	discount_amount: Decimal | number;
	applied_to_item_id?: string;
	created_at: string;
}

export interface DiscountProduct {
	id: string;
	discount_id: string;
	product_id: string;
	created_at: string;
}

export interface DiscountProductsQueryParams {
	limit: number;
	offset: number;
}

export enum WeightUnit {
	Grams = "grams",
	Kilograms = "kilograms",
	Pounds = "pounds",
	Ounces = "ounces",
}

export enum DimensionUnit {
	Millimeters = "millimeters",
	Centimeters = "centimeters",
	Meters = "meters",
	Inches = "inches",
	Feet = "feet",
}

export interface PhysicalProperties {
	width?: number;
	height?: number;
	length?: number;
	weight?: number;
	weight_unit: WeightUnit;
	dimension_unit: DimensionUnit;
}

export interface Product {
	id: string;
	title: string;
	cover_url?: string;
	slug: string;
	description: string;
	sku?: string;
	price: Decimal | number;
	data?: string;
	data_public?: string;
	physical_properties?: PhysicalProperties;
	allow_negative_stock: boolean;
	is_live: boolean;
	requires_shipping: boolean;
	categories: string[];
	tags: string[];
	shop_id: string;
	created_at: string;
	updated_at: string;
}

export interface DiscountProductsResponse {
	data: Product[];
	total: number;
}

export interface DiscountsQueryParams {
	shop_id: string;
	limit: number;
	offset: number;
}

export interface DiscountsResponse {
	data: Discount[];
	total: number;
}

export interface EUBankDetails {
	bank_name: string;
	iban: string;
	bic_swift: string;
	account_holder_name: string;
}

export interface IndiaBankDetails {
	bank_name: string;
	ifsc_code: string;
	account_number: string;
	account_holder_name: string;
	swift_code?: string;
}

export interface InlineAddress {
	recipient_name?: string;
	street: string;
	street2?: string;
	city: string;
	state: string;
	country: string;
	zip: string;
	phone?: string;
	vat_number?: string;
	company_name?: string;
}

export interface InvoiceConfig {
	bank_accounts: BankAccountList;
	default_currency: Currency;
	invoice_template?: string;
	payment_terms?: string;
	payment_instructions?: string;
}

export interface NewAddress {
	recipient_name?: string;
	street: string;
	street2?: string;
	city: string;
	state: string;
	country: string;
	zip: string;
	phone?: string;
	vat_number?: string;
	company_name?: string;
	is_default: boolean;
	kind: AddressType;
	shop_id?: string;
	user_id?: string;
}

export interface NewDiscount {
	shop_id: string;
	title: string;
	description?: string;
	discount_type: DiscountType;
	value: Decimal | number;
	value_type: DiscountValueType;
	minimum_spend_amount?: Decimal | number;
	config?: DiscountConfig;
	start_date: string;
	end_date: string;
	product_ids: string[];
}

export interface NewOrderPaymentSubmission {
	order_id: string;
	payment_gateway_id?: string;
	success_url?: string;
	cancel_url?: string;
}

export interface NewOrderSubmissionItem {
	product_id: string;
	quantity: number;
}

export type PaymentGatewayConfig = 
	| { type: "STRIPE", content: StripeConfig }
	| { type: "INVOICE", content: InvoiceConfig };

export interface NewPaymentGateway {
	title: string;
	provider_config: PaymentGatewayConfig;
	is_test_mode: boolean;
	shop_id: string;
}

export interface NewProduct {
	title: string;
	cover_url?: string;
	slug: string;
	description: string;
	sku?: string;
	price: Decimal | number;
	data?: string;
	data_public?: string;
	physical_properties?: PhysicalProperties;
	allow_negative_stock: boolean;
	is_live: boolean;
	requires_shipping: boolean;
	categories: string[];
	tags: string[];
	shop_id: string;
}

export interface NewPublicUserOrderFields {
	customer_user_email: string;
	shipping_address: InlineAddress;
	billing_address: InlineAddress;
}

export interface NewRegisteredUserOrderFields {
	customer_user_id: string;
	shipping_address_id: string;
	billing_address_id: string;
}

export enum ShippingRateCalculationMethod {
	ByUnit = "by_unit",
	ByKilo = "by_kilo",
	ByOrder = "by_order",
}

export enum ShippingSpeed {
	Standard = "standard",
	Express = "express",
}

export interface NewShippingRateTemplate {
	title?: string;
	description?: string;
	shop_id: string;
	provider: string;
	rates: ShippingRates;
	currency: Currency;
	method: ShippingRateCalculationMethod;
	service_level: ShippingSpeed;
}

export interface NewShop {
	name: string;
	default_currency: Currency;
}

export enum StockMovementReason {
	Purchase = "purchase",
	Sale = "sale",
	Return = "return",
	Damage = "damage",
	Adjustment = "adjustment",
	Transfer = "transfer",
}

export interface NewStockMovement {
	quantity: number;
	product_id: string;
	warehouse_id: string;
	reference?: string;
	reason: StockMovementReason;
	shop_id: string;
}

export interface NewWarehouse {
	title: string;
	code?: string;
	address_id: string;
	is_active: boolean;
	shop_id: string;
}

export enum OrderStatus {
	Draft = "draft",
	New = "new",
	Paid = "paid",
	Processing = "processing",
	OnHold = "on_hold",
	Shipped = "shipped",
	Delivered = "delivered",
	Cancelled = "cancelled",
	Refunded = "refunded",
	Failed = "failed",
}

export enum OrderSource {
	PublicUser = "public_user",
	RegisteredUser = "registered_user",
}

export interface Order {
	id: string;
	customer_user_id?: string;
	customer_user_email?: string;
	shop_id: string;
	warehouse_id: string;
	shipping_address: InlineAddress;
	shipping_address_id?: string;
	billing_address: InlineAddress;
	billing_address_id?: string;
	currency: Currency;
	status: OrderStatus;
	shipping_method: string;
	shipping_total: Decimal | number;
	subtotal_before_discount: Decimal | number;
	discount_total: Decimal | number;
	subtotal: Decimal | number;
	tax_total: Decimal | number;
	total: Decimal | number;
	notes?: string;
	source: OrderSource;
	created_at: string;
	updated_at: string;
}

export interface OrderItem {
	id: string;
	order_id: string;
	product_id: string;
	sku?: string;
	quantity: number;
	unit_price: Decimal | number;
	unit_tax: Decimal | number;
	unit_discount: Decimal | number;
	subtotal_before_discount: Decimal | number;
	discount_total: Decimal | number;
	subtotal: Decimal | number;
	tax_total: Decimal | number;
	total: Decimal | number;
	created_at: string;
}

export enum PaymentStatus {
	Pending = "pending",
	Authorized = "authorized",
	Captured = "captured",
	Failed = "failed",
	Refunded = "refunded",
}

export interface OrderPayment {
	id: string;
	order_id: string;
	payment_gateway_id: string;
	amount: Decimal | number;
	currency: Currency;
	status: PaymentStatus;
	transaction_id: string;
	data?: string;
	error_message?: string;
	created_at: string;
	updated_at: string;
}

export interface OrderTotal {
	shipping_total: Decimal | number;
	subtotal_before_discount: Decimal | number;
	discount_total: Decimal | number;
	subtotal: Decimal | number;
	tax_total: Decimal | number;
	total: Decimal | number;
}

export interface OrdersQueryParams {
	shop_id: string;
	limit: number;
	offset: number;
}

export type OrderRecord = 
	| { type: "PublicUser", content: ProcessedPublicUserOrder }
	| { type: "RegisteredUser", content: ProcessedRegisteredUserOrder };

export interface OrdersRecordsResponse {
	data: OrderRecord[];
	total: number;
}

export interface OrdersResponse {
	data: Order[];
	total: number;
}

export interface PaymentGateway {
	id: string;
	title: string;
	provider_config: PaymentGatewayConfig;
	is_test_mode: boolean;
	shop_id: string;
	created_at: string;
	updated_at: string;
}

export interface PaymentGatewaysQueryParams {
	shop_id: string;
	limit: number;
	offset: number;
}

export interface PaymentGatewaysResponse {
	data: PaymentGateway[];
	total: number;
}

export interface PaymentsQueryParams {
	shop_id: string;
	order_id?: string;
	status?: PaymentStatus;
	limit: number;
	offset: number;
}

export interface PendingDiscountApplication {
	discount_id: string;
	voucher_code?: string;
	discount_amount: Decimal | number;
	applied_to_item_id?: string;
}

export interface ProcessedOrderItem {
	order_id: string;
	product_id: string;
	sku?: string;
	quantity: number;
	unit_price: Decimal | number;
	unit_tax: Decimal | number;
	unit_discount: Decimal | number;
	subtotal_before_discount: Decimal | number;
	discount_total: Decimal | number;
	subtotal: Decimal | number;
	tax_total: Decimal | number;
	total: Decimal | number;
}

export interface ProcessedOrderBase {
	id: string;
	shop_id: string;
	warehouse_id: string;
	currency: Currency;
	status: OrderStatus;
	shipping_method: string;
	notes?: string;
	items: ProcessedOrderItem[];
	discount_applications: PendingDiscountApplication[];
}

export interface ProductsByCategoryQueryParams {
	shop_id: string;
	limit: number;
	offset: number;
}

export interface ProductsQueryParams {
	shop_id: string;
	limit: number;
	offset: number;
	is_live?: boolean;
	warehouse_id?: string;
}

export interface ProductsResponse {
	data: Product[];
	total: number;
}

export interface PublicFile {
	id: string;
	filename: string;
	product_id: string;
}

export interface PublicProduct {
	id: string;
	title: string;
	cover_url?: string;
	slug: string;
	description: string;
	sku?: string;
	price: Decimal | number;
	data_public?: string;
	physical_properties?: PhysicalProperties;
	categories: string[];
	tags: string[];
}

export interface PublicStock {
	warehouse_id: string;
	product_id: string;
	stock_level: number;
}

export interface PublicWarehouse {
	id: string;
	title: string;
	zip: string;
	state: string;
	country: string;
}

export interface PublicProductsResponse {
	data: PublicProduct[];
	files?: PublicFile[];
	stock?: PublicStock[];
	warehouses?: PublicWarehouse[];
	discounts?: Record<string, Discount[]>;
	total: number;
}

export interface PublicShippingRate {
	id: string;
	warehouse_id: string;
	provider: string;
	rates: ShippingRates;
	currency: Currency;
	method: ShippingRateCalculationMethod;
	service_level: ShippingSpeed;
}

export interface PublicShop {
	id: string;
	name: string;
	default_currency: Currency;
}

export interface RegisteredUserOrderFields {
	customer_user_id: string;
	shipping_address_id: string;
	shipping_address: InlineAddress;
	billing_address_id: string;
	billing_address: InlineAddress;
}

export interface ShippingRateTemplate {
	id: string;
	title?: string;
	description?: string;
	shop_id: string;
	provider: string;
	rates: ShippingRates;
	currency: Currency;
	method: ShippingRateCalculationMethod;
	service_level: ShippingSpeed;
	created_at: string;
	updated_at: string;
}

export interface ShippingRateTemplateWithWarehouseIds {
	id: string;
	title?: string;
	description?: string;
	shop_id: string;
	provider: string;
	rates: ShippingRates;
	currency: Currency;
	method: ShippingRateCalculationMethod;
	service_level: ShippingSpeed;
	created_at: string;
	updated_at: string;
	warehouse_ids: string[];
}

export interface Shop {
	id: string;
	name: string;
	default_currency: Currency;
	created_at: string;
	updated_at: string;
}

export enum ShopRole {
	Owner = "owner",
	Member = "member",
}

export interface ShopUser {
	id: string;
	shop_id: string;
	user_id: string;
	role: ShopRole;
	created_at: string;
	updated_at: string;
}

export interface ShopsResponse {
	data: Shop[];
	total: number;
}

export interface StockMovement {
	id: string;
	quantity: number;
	product_id: string;
	warehouse_id: string;
	reference?: string;
	reason: StockMovementReason;
	shop_id: string;
	created_at: string;
}

export interface StockMovementsQueryParams {
	shop_id: string;
	limit: number;
	offset: number;
}

export interface StockMovementsResponse {
	data: StockMovement[];
	total: number;
}

export interface StripeConfig {
	public_key: string;
	secret_key: string;
	product_id: string;
	webhook_url: string;
	webhook_secret: string;
}

export interface TaxRateQueryMinimal {
	destination_country: string;
	destination_state?: string;
	transaction?: TransactionType;
	ignore_threshold?: boolean;
}

export interface TaxRatesQuery {
	origin_country: string;
	origin_state?: string;
	destination_country: string;
	destination_state?: string;
	transaction?: TransactionType;
	ignore_threshold?: boolean;
}

export interface TaxRatesQueryValidated {
	origin_region: Region;
	destination_region: Region;
	transaction: TransactionType;
	ignore_threshold: boolean;
}

export interface TemplatesWithWarehouseIdResponse {
	data: ShippingRateTemplateWithWarehouseIds[];
	total: number;
}

export interface UKBankDetails {
	bank_name: string;
	sort_code: string;
	account_number: string;
	account_holder_name: string;
	iban?: string;
	bic_swift?: string;
	correspondent_bank?: CorrespondentBankDetails;
}

export enum USAccountType {
	CHECKING = "CHECKING",
	SAVINGS = "SAVINGS",
}

export interface USBankDetails {
	bank_name: string;
	routing_number: string;
	account_number: string;
	account_holder_name: string;
	account_type: USAccountType;
	swift_code?: string;
}

export interface UpdateAddres {
	recipient_name?: string;
	street?: string;
	street2?: string;
	city?: string;
	state?: string;
	country?: string;
	zip?: string;
	phone?: string;
	vat_number?: string;
	company_name?: string;
	is_default?: boolean;
	kind?: AddressType;
	updated_at: string;
}

export interface UpdateDiscount {
	title?: string;
	description?: string;
	value?: Decimal | number;
	minimum_spend_amount?: Decimal | number;
	config?: DiscountConfig;
	start_date: string;
	end_date: string;
	product_ids?: string[];
	is_active?: boolean;
}

export interface UpdatePaymentGateway {
	title?: string;
	provider_config?: PaymentGatewayConfig;
	is_test_mode?: boolean;
	updated_at: string;
}

export interface UpdatePaymentStatus {
	status: PaymentStatus;
	error_message?: string;
}

export interface UpdateProduct {
	title?: string;
	cover_url?: string;
	slug?: string;
	description?: string;
	sku?: string;
	price?: Decimal | number;
	data?: string;
	data_public?: string;
	physical_properties?: PhysicalProperties;
	allow_negative_stock?: boolean;
	is_live?: boolean;
	requires_shipping?: boolean;
	categories?: string[];
	tags?: string[];
	updated_at: string;
}

export interface UpdateShippingRateTemplate {
	title?: string;
	description?: string;
	rates?: ShippingRates;
	method?: ShippingRateCalculationMethod;
	service_level?: ShippingSpeed;
	updated_at: string;
}

export interface UpdateShop {
	name: string;
}

export interface UpdateStockMovement {
	quantity: number;
	reference?: string;
	reason?: StockMovementReason;
}

export interface UpdateWarehouse {
	title?: string;
	code?: string;
	address_id?: string;
	is_active?: boolean;
	updated_at: string;
}

export interface VolumeTier {
	min_quantity: number;
	max_quantity: number;
	tier_value: Decimal | number;
}

export interface VoucherCodeValidationRequest {
	shop_id: string;
	code: string;
	order_subtotal: Decimal | number;
}

export interface VoucherCodeValidationResponse {
	valid: boolean;
	discount_amount?: Decimal | number;
	error_message?: string;
}

export interface Warehouse {
	id: string;
	title: string;
	code?: string;
	address_id: string;
	is_active: boolean;
	shop_id: string;
	created_at: string;
	updated_at: string;
}

export interface WarehouseStockLevel {
	warehouse_title?: string;
	warehouse_id: string;
	stock_level: number;
}

export interface WarehousesQueryParams {
	shop_id: string;
	limit: number;
	offset: number;
}

export interface WarehousesResponse {
	data: Warehouse[];
	total: number;
}


// Flattened NewOrder types (manually generated due to generic constraints and serde flatten)
export interface NewPublicUserOrder {
    // From NewOrderBase
    id: string;
    shop_id: string;
    warehouse_id?: string;
    currency: Currency;
    shipping_method?: string;
    notes?: string;
    items: NewOrderSubmissionItem[];
    // From NewPublicUserOrderFields (flattened)
    customer_user_email: string;
    shipping_address: InlineAddress;
    billing_address: InlineAddress;
}

export interface NewRegisteredUserOrder {
    // From NewOrderBase
    id: string;
    shop_id: string;
    warehouse_id?: string;
    currency: Currency;
    shipping_method?: string;
    notes?: string;
    items: NewOrderSubmissionItem[];
    // From NewRegisteredUserOrderFields (flattened)
    customer_user_id: string;
    shipping_address_id: string;
    billing_address_id: string;
}

export interface NewOrderCalculation {
    // From NewOrderBase
    id: string;
    shop_id: string;
    warehouse_id?: string;
    currency: Currency;
    shipping_method?: string;
    notes?: string;
    items: NewOrderSubmissionItem[];
    // From TaxRateQueryMinimal (flattened)
    destination_country: string;
    destination_state?: string;
    transaction?: TransactionType;
    ignore_threshold?: boolean;
}

// ProcessedOrderPreview with flattened OrderTotal
export interface ProcessedOrderPreview {
    id: string;
    shop_id: string;
    warehouse_id: string;
    currency: Currency;
    status: OrderStatus;
    // From OrderTotal (flattened)
    shipping_total: number;
    subtotal_before_discount: number;
    discount_total: number;
    subtotal: number;
    tax_total: number;
    total: number;
}

// Flattened ProcessedOrder types
export interface ProcessedPublicUserOrder {
    // From ProcessedOrderBase
    id: string;
    shop_id: string;
    warehouse_id: string;
    currency: Currency;
    status: OrderStatus;
    shipping_method: string;
    notes?: string;
    items: ProcessedOrderItem[];
    // From NewPublicUserOrderFields (flattened)
    customer_user_email: string;
    shipping_address: InlineAddress;
    billing_address: InlineAddress;
    // From OrderTotal (flattened)
    shipping_total: number;
    subtotal_before_discount: number;
    discount_total: number;
    subtotal: number;
    tax_total: number;
    total: number;
}

export interface ProcessedRegisteredUserOrder {
    // From ProcessedOrderBase
    id: string;
    shop_id: string;
    warehouse_id: string;
    currency: Currency;
    status: OrderStatus;
    shipping_method: string;
    notes?: string;
    items: ProcessedOrderItem[];
    // From RegisteredUserOrderFields (flattened)
    customer_user_id: string;
    shipping_address_id: string;
    shipping_address: InlineAddress;
    billing_address_id: string;
    billing_address: InlineAddress;
    // From OrderTotal (flattened)
    shipping_total: number;
    subtotal_before_discount: number;
    discount_total: number;
    subtotal: number;
    tax_total: number;
    total: number;
}

export interface ProcessedOrderCalculation {
    // From ProcessedOrderBase
    id: string;
    shop_id: string;
    warehouse_id: string;
    currency: Currency;
    status: OrderStatus;
    shipping_method: string;
    notes?: string;
    items: ProcessedOrderItem[];
    // From () - no specific fields
    // From OrderTotal (flattened)
    shipping_total: number;
    subtotal_before_discount: number;
    discount_total: number;
    subtotal: number;
    tax_total: number;
    total: number;
}

// Generic ProcessedOrder type (can represent any of the above ProcessedOrder variants)
export type ProcessedOrder = ProcessedPublicUserOrder | ProcessedRegisteredUserOrder | ProcessedOrderCalculation;

// world_tax crate types (generated manually since they're external dependencies)
export enum TransactionType {
    B2B = "b2b",
    B2C = "b2c",
    C2C = "c2c"
}

export interface Region {
    country: string;
    subdivision?: string;
}

// Tax rate result type
export interface TaxRate {
    rate: number;
    description?: string;
    region: Region;
}